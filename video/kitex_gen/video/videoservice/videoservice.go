// Code generated by Kitex v0.6.1. DO NOT EDIT.

package videoservice

import (
	"context"
	video "douyinv2/video/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"VideoPublish":  kitex.NewMethodInfo(videoPublishHandler, newVideoServiceVideoPublishArgs, newVideoServiceVideoPublishResult, false),
		"GetVideoList":  kitex.NewMethodInfo(getVideoListHandler, newVideoServiceGetVideoListArgs, newVideoServiceGetVideoListResult, false),
		"Feed":          kitex.NewMethodInfo(feedHandler, newVideoServiceFeedArgs, newVideoServiceFeedResult, false),
		"LikeAction":    kitex.NewMethodInfo(likeActionHandler, newVideoServiceLikeActionArgs, newVideoServiceLikeActionResult, false),
		"LikeVideos":    kitex.NewMethodInfo(likeVideosHandler, newVideoServiceLikeVideosArgs, newVideoServiceLikeVideosResult, false),
		"IfLike":        kitex.NewMethodInfo(ifLikeHandler, newVideoServiceIfLikeArgs, newVideoServiceIfLikeResult, false),
		"CommentACtion": kitex.NewMethodInfo(commentACtionHandler, newVideoServiceCommentACtionArgs, newVideoServiceCommentACtionResult, false),
		"CommentList":   kitex.NewMethodInfo(commentListHandler, newVideoServiceCommentListArgs, newVideoServiceCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func videoPublishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoPublishArgs)
	realResult := result.(*video.VideoServiceVideoPublishResult)
	success, err := handler.(video.VideoService).VideoPublish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishArgs() interface{} {
	return video.NewVideoServiceVideoPublishArgs()
}

func newVideoServiceVideoPublishResult() interface{} {
	return video.NewVideoServiceVideoPublishResult()
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideoListArgs)
	realResult := result.(*video.VideoServiceGetVideoListResult)
	success, err := handler.(video.VideoService).GetVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoListArgs() interface{} {
	return video.NewVideoServiceGetVideoListArgs()
}

func newVideoServiceGetVideoListResult() interface{} {
	return video.NewVideoServiceGetVideoListResult()
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFeedArgs)
	realResult := result.(*video.VideoServiceFeedResult)
	success, err := handler.(video.VideoService).Feed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedArgs() interface{} {
	return video.NewVideoServiceFeedArgs()
}

func newVideoServiceFeedResult() interface{} {
	return video.NewVideoServiceFeedResult()
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceLikeActionArgs)
	realResult := result.(*video.VideoServiceLikeActionResult)
	success, err := handler.(video.VideoService).LikeAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceLikeActionArgs() interface{} {
	return video.NewVideoServiceLikeActionArgs()
}

func newVideoServiceLikeActionResult() interface{} {
	return video.NewVideoServiceLikeActionResult()
}

func likeVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceLikeVideosArgs)
	realResult := result.(*video.VideoServiceLikeVideosResult)
	success, err := handler.(video.VideoService).LikeVideos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceLikeVideosArgs() interface{} {
	return video.NewVideoServiceLikeVideosArgs()
}

func newVideoServiceLikeVideosResult() interface{} {
	return video.NewVideoServiceLikeVideosResult()
}

func ifLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceIfLikeArgs)
	realResult := result.(*video.VideoServiceIfLikeResult)
	success, err := handler.(video.VideoService).IfLike(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceIfLikeArgs() interface{} {
	return video.NewVideoServiceIfLikeArgs()
}

func newVideoServiceIfLikeResult() interface{} {
	return video.NewVideoServiceIfLikeResult()
}

func commentACtionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceCommentACtionArgs)
	realResult := result.(*video.VideoServiceCommentACtionResult)
	success, err := handler.(video.VideoService).CommentACtion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCommentACtionArgs() interface{} {
	return video.NewVideoServiceCommentACtionArgs()
}

func newVideoServiceCommentACtionResult() interface{} {
	return video.NewVideoServiceCommentACtionResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceCommentListArgs)
	realResult := result.(*video.VideoServiceCommentListResult)
	success, err := handler.(video.VideoService).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCommentListArgs() interface{} {
	return video.NewVideoServiceCommentListArgs()
}

func newVideoServiceCommentListResult() interface{} {
	return video.NewVideoServiceCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VideoPublish(ctx context.Context, req *video.VideoPublishRequest) (r *video.VideoPublishResponse, err error) {
	var _args video.VideoServiceVideoPublishArgs
	_args.Req = req
	var _result video.VideoServiceVideoPublishResult
	if err = p.c.Call(ctx, "VideoPublish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, req *video.VideoPublishedListRequest) (r *video.VideoPublishedListResponse, err error) {
	var _args video.VideoServiceGetVideoListArgs
	_args.Req = req
	var _result video.VideoServiceGetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Feed(ctx context.Context, req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args video.VideoServiceFeedArgs
	_args.Req = req
	var _result video.VideoServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeAction(ctx context.Context, req *video.FavoriteActionRequest) (r *video.FavoriteActionResponse, err error) {
	var _args video.VideoServiceLikeActionArgs
	_args.Req = req
	var _result video.VideoServiceLikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeVideos(ctx context.Context, req *video.FavoriteVideoListRequest) (r *video.FavoriteVideoListResponse, err error) {
	var _args video.VideoServiceLikeVideosArgs
	_args.Req = req
	var _result video.VideoServiceLikeVideosResult
	if err = p.c.Call(ctx, "LikeVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IfLike(ctx context.Context, req *video.DoesFavoriteRequest) (r *video.DoesFavoriteResponse, err error) {
	var _args video.VideoServiceIfLikeArgs
	_args.Req = req
	var _result video.VideoServiceIfLikeResult
	if err = p.c.Call(ctx, "IfLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentACtion(ctx context.Context, req *video.CommentActionRequest) (r *video.CommentActionResponse, err error) {
	var _args video.VideoServiceCommentACtionArgs
	_args.Req = req
	var _result video.VideoServiceCommentACtionResult
	if err = p.c.Call(ctx, "CommentACtion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *video.CommentListRequest) (r *video.CommentListResponse, err error) {
	var _args video.VideoServiceCommentListArgs
	_args.Req = req
	var _result video.VideoServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
