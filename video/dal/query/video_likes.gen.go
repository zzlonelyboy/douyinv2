// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"douyinv2/video/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newVideoLikes(db *gorm.DB, opts ...gen.DOOption) videoLikes {
	_videoLikes := videoLikes{}

	_videoLikes.videoLikesDo.UseDB(db, opts...)
	_videoLikes.videoLikesDo.UseModel(&model.VideoLikes{})

	tableName := _videoLikes.videoLikesDo.TableName()
	_videoLikes.ALL = field.NewAsterisk(tableName)
	_videoLikes.ID = field.NewInt64(tableName, "id")
	_videoLikes.CreatedAt = field.NewTime(tableName, "created_at")
	_videoLikes.UpdatedAt = field.NewTime(tableName, "updated_at")
	_videoLikes.DeletedAt = field.NewField(tableName, "deleted_at")
	_videoLikes.UserID = field.NewInt64(tableName, "user_id")
	_videoLikes.VideoID = field.NewInt64(tableName, "video_id")

	_videoLikes.fillFieldMap()

	return _videoLikes
}

type videoLikes struct {
	videoLikesDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Int64
	VideoID   field.Int64

	fieldMap map[string]field.Expr
}

func (v videoLikes) Table(newTableName string) *videoLikes {
	v.videoLikesDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoLikes) As(alias string) *videoLikes {
	v.videoLikesDo.DO = *(v.videoLikesDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoLikes) updateTableName(table string) *videoLikes {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.UserID = field.NewInt64(table, "user_id")
	v.VideoID = field.NewInt64(table, "video_id")

	v.fillFieldMap()

	return v
}

func (v *videoLikes) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoLikes) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["video_id"] = v.VideoID
}

func (v videoLikes) clone(db *gorm.DB) videoLikes {
	v.videoLikesDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoLikes) replaceDB(db *gorm.DB) videoLikes {
	v.videoLikesDo.ReplaceDB(db)
	return v
}

type videoLikesDo struct{ gen.DO }

type IVideoLikesDo interface {
	gen.SubQuery
	Debug() IVideoLikesDo
	WithContext(ctx context.Context) IVideoLikesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoLikesDo
	WriteDB() IVideoLikesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoLikesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoLikesDo
	Not(conds ...gen.Condition) IVideoLikesDo
	Or(conds ...gen.Condition) IVideoLikesDo
	Select(conds ...field.Expr) IVideoLikesDo
	Where(conds ...gen.Condition) IVideoLikesDo
	Order(conds ...field.Expr) IVideoLikesDo
	Distinct(cols ...field.Expr) IVideoLikesDo
	Omit(cols ...field.Expr) IVideoLikesDo
	Join(table schema.Tabler, on ...field.Expr) IVideoLikesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoLikesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoLikesDo
	Group(cols ...field.Expr) IVideoLikesDo
	Having(conds ...gen.Condition) IVideoLikesDo
	Limit(limit int) IVideoLikesDo
	Offset(offset int) IVideoLikesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoLikesDo
	Unscoped() IVideoLikesDo
	Create(values ...*model.VideoLikes) error
	CreateInBatches(values []*model.VideoLikes, batchSize int) error
	Save(values ...*model.VideoLikes) error
	First() (*model.VideoLikes, error)
	Take() (*model.VideoLikes, error)
	Last() (*model.VideoLikes, error)
	Find() ([]*model.VideoLikes, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoLikes, err error)
	FindInBatches(result *[]*model.VideoLikes, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoLikes) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoLikesDo
	Assign(attrs ...field.AssignExpr) IVideoLikesDo
	Joins(fields ...field.RelationField) IVideoLikesDo
	Preload(fields ...field.RelationField) IVideoLikesDo
	FirstOrInit() (*model.VideoLikes, error)
	FirstOrCreate() (*model.VideoLikes, error)
	FindByPage(offset int, limit int) (result []*model.VideoLikes, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoLikesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videoLikesDo) Debug() IVideoLikesDo {
	return v.withDO(v.DO.Debug())
}

func (v videoLikesDo) WithContext(ctx context.Context) IVideoLikesDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoLikesDo) ReadDB() IVideoLikesDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoLikesDo) WriteDB() IVideoLikesDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoLikesDo) Session(config *gorm.Session) IVideoLikesDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoLikesDo) Clauses(conds ...clause.Expression) IVideoLikesDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoLikesDo) Returning(value interface{}, columns ...string) IVideoLikesDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoLikesDo) Not(conds ...gen.Condition) IVideoLikesDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoLikesDo) Or(conds ...gen.Condition) IVideoLikesDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoLikesDo) Select(conds ...field.Expr) IVideoLikesDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoLikesDo) Where(conds ...gen.Condition) IVideoLikesDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoLikesDo) Order(conds ...field.Expr) IVideoLikesDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoLikesDo) Distinct(cols ...field.Expr) IVideoLikesDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoLikesDo) Omit(cols ...field.Expr) IVideoLikesDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoLikesDo) Join(table schema.Tabler, on ...field.Expr) IVideoLikesDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoLikesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoLikesDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoLikesDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoLikesDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoLikesDo) Group(cols ...field.Expr) IVideoLikesDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoLikesDo) Having(conds ...gen.Condition) IVideoLikesDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoLikesDo) Limit(limit int) IVideoLikesDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoLikesDo) Offset(offset int) IVideoLikesDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoLikesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoLikesDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoLikesDo) Unscoped() IVideoLikesDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoLikesDo) Create(values ...*model.VideoLikes) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoLikesDo) CreateInBatches(values []*model.VideoLikes, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoLikesDo) Save(values ...*model.VideoLikes) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoLikesDo) First() (*model.VideoLikes, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLikes), nil
	}
}

func (v videoLikesDo) Take() (*model.VideoLikes, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLikes), nil
	}
}

func (v videoLikesDo) Last() (*model.VideoLikes, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLikes), nil
	}
}

func (v videoLikesDo) Find() ([]*model.VideoLikes, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoLikes), err
}

func (v videoLikesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoLikes, err error) {
	buf := make([]*model.VideoLikes, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoLikesDo) FindInBatches(result *[]*model.VideoLikes, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoLikesDo) Attrs(attrs ...field.AssignExpr) IVideoLikesDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoLikesDo) Assign(attrs ...field.AssignExpr) IVideoLikesDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoLikesDo) Joins(fields ...field.RelationField) IVideoLikesDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoLikesDo) Preload(fields ...field.RelationField) IVideoLikesDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoLikesDo) FirstOrInit() (*model.VideoLikes, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLikes), nil
	}
}

func (v videoLikesDo) FirstOrCreate() (*model.VideoLikes, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLikes), nil
	}
}

func (v videoLikesDo) FindByPage(offset int, limit int) (result []*model.VideoLikes, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoLikesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoLikesDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoLikesDo) Delete(models ...*model.VideoLikes) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoLikesDo) withDO(do gen.Dao) *videoLikesDo {
	v.DO = *do.(*gen.DO)
	return v
}
