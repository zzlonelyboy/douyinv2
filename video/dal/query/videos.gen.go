// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"douyinv2/video/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newVideos(db *gorm.DB, opts ...gen.DOOption) videos {
	_videos := videos{}

	_videos.videosDo.UseDB(db, opts...)
	_videos.videosDo.UseModel(&model.Videos{})

	tableName := _videos.videosDo.TableName()
	_videos.ALL = field.NewAsterisk(tableName)
	_videos.ID = field.NewInt64(tableName, "id")
	_videos.CreatedAt = field.NewTime(tableName, "created_at")
	_videos.UpdatedAt = field.NewTime(tableName, "updated_at")
	_videos.DeletedAt = field.NewField(tableName, "deleted_at")
	_videos.PostUserID = field.NewInt64(tableName, "post_user_id")
	_videos.Playurl = field.NewString(tableName, "playurl")
	_videos.Coverurl = field.NewString(tableName, "coverurl")
	_videos.Title = field.NewString(tableName, "title")

	_videos.fillFieldMap()

	return _videos
}

type videos struct {
	videosDo

	ALL        field.Asterisk
	ID         field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	PostUserID field.Int64
	Playurl    field.String
	Coverurl   field.String
	Title      field.String

	fieldMap map[string]field.Expr
}

func (v videos) Table(newTableName string) *videos {
	v.videosDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videos) As(alias string) *videos {
	v.videosDo.DO = *(v.videosDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videos) updateTableName(table string) *videos {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.PostUserID = field.NewInt64(table, "post_user_id")
	v.Playurl = field.NewString(table, "playurl")
	v.Coverurl = field.NewString(table, "coverurl")
	v.Title = field.NewString(table, "title")

	v.fillFieldMap()

	return v
}

func (v *videos) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videos) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 8)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["post_user_id"] = v.PostUserID
	v.fieldMap["playurl"] = v.Playurl
	v.fieldMap["coverurl"] = v.Coverurl
	v.fieldMap["title"] = v.Title
}

func (v videos) clone(db *gorm.DB) videos {
	v.videosDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videos) replaceDB(db *gorm.DB) videos {
	v.videosDo.ReplaceDB(db)
	return v
}

type videosDo struct{ gen.DO }

type IVideosDo interface {
	gen.SubQuery
	Debug() IVideosDo
	WithContext(ctx context.Context) IVideosDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideosDo
	WriteDB() IVideosDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideosDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideosDo
	Not(conds ...gen.Condition) IVideosDo
	Or(conds ...gen.Condition) IVideosDo
	Select(conds ...field.Expr) IVideosDo
	Where(conds ...gen.Condition) IVideosDo
	Order(conds ...field.Expr) IVideosDo
	Distinct(cols ...field.Expr) IVideosDo
	Omit(cols ...field.Expr) IVideosDo
	Join(table schema.Tabler, on ...field.Expr) IVideosDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideosDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideosDo
	Group(cols ...field.Expr) IVideosDo
	Having(conds ...gen.Condition) IVideosDo
	Limit(limit int) IVideosDo
	Offset(offset int) IVideosDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideosDo
	Unscoped() IVideosDo
	Create(values ...*model.Videos) error
	CreateInBatches(values []*model.Videos, batchSize int) error
	Save(values ...*model.Videos) error
	First() (*model.Videos, error)
	Take() (*model.Videos, error)
	Last() (*model.Videos, error)
	Find() ([]*model.Videos, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Videos, err error)
	FindInBatches(result *[]*model.Videos, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Videos) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideosDo
	Assign(attrs ...field.AssignExpr) IVideosDo
	Joins(fields ...field.RelationField) IVideosDo
	Preload(fields ...field.RelationField) IVideosDo
	FirstOrInit() (*model.Videos, error)
	FirstOrCreate() (*model.Videos, error)
	FindByPage(offset int, limit int) (result []*model.Videos, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideosDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videosDo) Debug() IVideosDo {
	return v.withDO(v.DO.Debug())
}

func (v videosDo) WithContext(ctx context.Context) IVideosDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videosDo) ReadDB() IVideosDo {
	return v.Clauses(dbresolver.Read)
}

func (v videosDo) WriteDB() IVideosDo {
	return v.Clauses(dbresolver.Write)
}

func (v videosDo) Session(config *gorm.Session) IVideosDo {
	return v.withDO(v.DO.Session(config))
}

func (v videosDo) Clauses(conds ...clause.Expression) IVideosDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videosDo) Returning(value interface{}, columns ...string) IVideosDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videosDo) Not(conds ...gen.Condition) IVideosDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videosDo) Or(conds ...gen.Condition) IVideosDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videosDo) Select(conds ...field.Expr) IVideosDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videosDo) Where(conds ...gen.Condition) IVideosDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videosDo) Order(conds ...field.Expr) IVideosDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videosDo) Distinct(cols ...field.Expr) IVideosDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videosDo) Omit(cols ...field.Expr) IVideosDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videosDo) Join(table schema.Tabler, on ...field.Expr) IVideosDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videosDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideosDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videosDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideosDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videosDo) Group(cols ...field.Expr) IVideosDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videosDo) Having(conds ...gen.Condition) IVideosDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videosDo) Limit(limit int) IVideosDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videosDo) Offset(offset int) IVideosDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videosDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideosDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videosDo) Unscoped() IVideosDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videosDo) Create(values ...*model.Videos) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videosDo) CreateInBatches(values []*model.Videos, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videosDo) Save(values ...*model.Videos) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videosDo) First() (*model.Videos, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Videos), nil
	}
}

func (v videosDo) Take() (*model.Videos, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Videos), nil
	}
}

func (v videosDo) Last() (*model.Videos, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Videos), nil
	}
}

func (v videosDo) Find() ([]*model.Videos, error) {
	result, err := v.DO.Find()
	return result.([]*model.Videos), err
}

func (v videosDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Videos, err error) {
	buf := make([]*model.Videos, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videosDo) FindInBatches(result *[]*model.Videos, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videosDo) Attrs(attrs ...field.AssignExpr) IVideosDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videosDo) Assign(attrs ...field.AssignExpr) IVideosDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videosDo) Joins(fields ...field.RelationField) IVideosDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videosDo) Preload(fields ...field.RelationField) IVideosDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videosDo) FirstOrInit() (*model.Videos, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Videos), nil
	}
}

func (v videosDo) FirstOrCreate() (*model.Videos, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Videos), nil
	}
}

func (v videosDo) FindByPage(offset int, limit int) (result []*model.Videos, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videosDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videosDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videosDo) Delete(models ...*model.Videos) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videosDo) withDO(do gen.Dao) *videosDo {
	v.DO = *do.(*gen.DO)
	return v
}
