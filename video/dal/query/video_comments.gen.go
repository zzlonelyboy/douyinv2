// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"douyinv2/video/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newVideoComments(db *gorm.DB, opts ...gen.DOOption) videoComments {
	_videoComments := videoComments{}

	_videoComments.videoCommentsDo.UseDB(db, opts...)
	_videoComments.videoCommentsDo.UseModel(&model.VideoComments{})

	tableName := _videoComments.videoCommentsDo.TableName()
	_videoComments.ALL = field.NewAsterisk(tableName)
	_videoComments.ID = field.NewInt64(tableName, "id")
	_videoComments.CreatedAt = field.NewTime(tableName, "created_at")
	_videoComments.UpdatedAt = field.NewTime(tableName, "updated_at")
	_videoComments.DeletedAt = field.NewField(tableName, "deleted_at")
	_videoComments.UserID = field.NewInt64(tableName, "user_id")
	_videoComments.VideoID = field.NewInt64(tableName, "video_id")
	_videoComments.CommentCon = field.NewString(tableName, "comment_con")

	_videoComments.fillFieldMap()

	return _videoComments
}

type videoComments struct {
	videoCommentsDo

	ALL        field.Asterisk
	ID         field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	UserID     field.Int64
	VideoID    field.Int64
	CommentCon field.String

	fieldMap map[string]field.Expr
}

func (v videoComments) Table(newTableName string) *videoComments {
	v.videoCommentsDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoComments) As(alias string) *videoComments {
	v.videoCommentsDo.DO = *(v.videoCommentsDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoComments) updateTableName(table string) *videoComments {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.UserID = field.NewInt64(table, "user_id")
	v.VideoID = field.NewInt64(table, "video_id")
	v.CommentCon = field.NewString(table, "comment_con")

	v.fillFieldMap()

	return v
}

func (v *videoComments) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoComments) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 7)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["comment_con"] = v.CommentCon
}

func (v videoComments) clone(db *gorm.DB) videoComments {
	v.videoCommentsDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoComments) replaceDB(db *gorm.DB) videoComments {
	v.videoCommentsDo.ReplaceDB(db)
	return v
}

type videoCommentsDo struct{ gen.DO }

type IVideoCommentsDo interface {
	gen.SubQuery
	Debug() IVideoCommentsDo
	WithContext(ctx context.Context) IVideoCommentsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoCommentsDo
	WriteDB() IVideoCommentsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoCommentsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoCommentsDo
	Not(conds ...gen.Condition) IVideoCommentsDo
	Or(conds ...gen.Condition) IVideoCommentsDo
	Select(conds ...field.Expr) IVideoCommentsDo
	Where(conds ...gen.Condition) IVideoCommentsDo
	Order(conds ...field.Expr) IVideoCommentsDo
	Distinct(cols ...field.Expr) IVideoCommentsDo
	Omit(cols ...field.Expr) IVideoCommentsDo
	Join(table schema.Tabler, on ...field.Expr) IVideoCommentsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoCommentsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoCommentsDo
	Group(cols ...field.Expr) IVideoCommentsDo
	Having(conds ...gen.Condition) IVideoCommentsDo
	Limit(limit int) IVideoCommentsDo
	Offset(offset int) IVideoCommentsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoCommentsDo
	Unscoped() IVideoCommentsDo
	Create(values ...*model.VideoComments) error
	CreateInBatches(values []*model.VideoComments, batchSize int) error
	Save(values ...*model.VideoComments) error
	First() (*model.VideoComments, error)
	Take() (*model.VideoComments, error)
	Last() (*model.VideoComments, error)
	Find() ([]*model.VideoComments, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoComments, err error)
	FindInBatches(result *[]*model.VideoComments, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoComments) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoCommentsDo
	Assign(attrs ...field.AssignExpr) IVideoCommentsDo
	Joins(fields ...field.RelationField) IVideoCommentsDo
	Preload(fields ...field.RelationField) IVideoCommentsDo
	FirstOrInit() (*model.VideoComments, error)
	FirstOrCreate() (*model.VideoComments, error)
	FindByPage(offset int, limit int) (result []*model.VideoComments, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoCommentsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videoCommentsDo) Debug() IVideoCommentsDo {
	return v.withDO(v.DO.Debug())
}

func (v videoCommentsDo) WithContext(ctx context.Context) IVideoCommentsDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoCommentsDo) ReadDB() IVideoCommentsDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoCommentsDo) WriteDB() IVideoCommentsDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoCommentsDo) Session(config *gorm.Session) IVideoCommentsDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoCommentsDo) Clauses(conds ...clause.Expression) IVideoCommentsDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoCommentsDo) Returning(value interface{}, columns ...string) IVideoCommentsDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoCommentsDo) Not(conds ...gen.Condition) IVideoCommentsDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoCommentsDo) Or(conds ...gen.Condition) IVideoCommentsDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoCommentsDo) Select(conds ...field.Expr) IVideoCommentsDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoCommentsDo) Where(conds ...gen.Condition) IVideoCommentsDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoCommentsDo) Order(conds ...field.Expr) IVideoCommentsDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoCommentsDo) Distinct(cols ...field.Expr) IVideoCommentsDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoCommentsDo) Omit(cols ...field.Expr) IVideoCommentsDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoCommentsDo) Join(table schema.Tabler, on ...field.Expr) IVideoCommentsDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoCommentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoCommentsDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoCommentsDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoCommentsDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoCommentsDo) Group(cols ...field.Expr) IVideoCommentsDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoCommentsDo) Having(conds ...gen.Condition) IVideoCommentsDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoCommentsDo) Limit(limit int) IVideoCommentsDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoCommentsDo) Offset(offset int) IVideoCommentsDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoCommentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoCommentsDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoCommentsDo) Unscoped() IVideoCommentsDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoCommentsDo) Create(values ...*model.VideoComments) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoCommentsDo) CreateInBatches(values []*model.VideoComments, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoCommentsDo) Save(values ...*model.VideoComments) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoCommentsDo) First() (*model.VideoComments, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComments), nil
	}
}

func (v videoCommentsDo) Take() (*model.VideoComments, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComments), nil
	}
}

func (v videoCommentsDo) Last() (*model.VideoComments, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComments), nil
	}
}

func (v videoCommentsDo) Find() ([]*model.VideoComments, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoComments), err
}

func (v videoCommentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoComments, err error) {
	buf := make([]*model.VideoComments, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoCommentsDo) FindInBatches(result *[]*model.VideoComments, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoCommentsDo) Attrs(attrs ...field.AssignExpr) IVideoCommentsDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoCommentsDo) Assign(attrs ...field.AssignExpr) IVideoCommentsDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoCommentsDo) Joins(fields ...field.RelationField) IVideoCommentsDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoCommentsDo) Preload(fields ...field.RelationField) IVideoCommentsDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoCommentsDo) FirstOrInit() (*model.VideoComments, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComments), nil
	}
}

func (v videoCommentsDo) FirstOrCreate() (*model.VideoComments, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoComments), nil
	}
}

func (v videoCommentsDo) FindByPage(offset int, limit int) (result []*model.VideoComments, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoCommentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoCommentsDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoCommentsDo) Delete(models ...*model.VideoComments) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoCommentsDo) withDO(do gen.Dao) *videoCommentsDo {
	v.DO = *do.(*gen.DO)
	return v
}
