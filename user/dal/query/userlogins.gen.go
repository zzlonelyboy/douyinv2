// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"douyinv2/user/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserlogin(db *gorm.DB, opts ...gen.DOOption) userlogin {
	_userlogin := userlogin{}

	_userlogin.userloginDo.UseDB(db, opts...)
	_userlogin.userloginDo.UseModel(&model.Userlogin{})

	tableName := _userlogin.userloginDo.TableName()
	_userlogin.ALL = field.NewAsterisk(tableName)
	_userlogin.ID = field.NewInt64(tableName, "id")
	_userlogin.CreatedAt = field.NewTime(tableName, "created_at")
	_userlogin.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userlogin.DeletedAt = field.NewField(tableName, "deleted_at")
	_userlogin.Username = field.NewString(tableName, "username")
	_userlogin.Password = field.NewString(tableName, "password")
	_userlogin.Avatar = field.NewString(tableName, "avatar")
	_userlogin.BackgroundImage = field.NewString(tableName, "background_image")
	_userlogin.Signature = field.NewString(tableName, "signature")
	_userlogin.TotalFavorited = field.NewString(tableName, "total_favorited")
	_userlogin.WorkCount = field.NewInt64(tableName, "work_count")
	_userlogin.FavoriteCount = field.NewInt64(tableName, "favorite_count")

	_userlogin.fillFieldMap()

	return _userlogin
}

type userlogin struct {
	userloginDo

	ALL             field.Asterisk
	ID              field.Int64
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	Username        field.String
	Password        field.String
	Avatar          field.String
	BackgroundImage field.String
	Signature       field.String
	TotalFavorited  field.String
	WorkCount       field.Int64
	FavoriteCount   field.Int64

	fieldMap map[string]field.Expr
}

func (u userlogin) Table(newTableName string) *userlogin {
	u.userloginDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userlogin) As(alias string) *userlogin {
	u.userloginDo.DO = *(u.userloginDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userlogin) updateTableName(table string) *userlogin {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")
	u.Avatar = field.NewString(table, "avatar")
	u.BackgroundImage = field.NewString(table, "background_image")
	u.Signature = field.NewString(table, "signature")
	u.TotalFavorited = field.NewString(table, "total_favorited")
	u.WorkCount = field.NewInt64(table, "work_count")
	u.FavoriteCount = field.NewInt64(table, "favorite_count")

	u.fillFieldMap()

	return u
}

func (u *userlogin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userlogin) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["background_image"] = u.BackgroundImage
	u.fieldMap["signature"] = u.Signature
	u.fieldMap["total_favorited"] = u.TotalFavorited
	u.fieldMap["work_count"] = u.WorkCount
	u.fieldMap["favorite_count"] = u.FavoriteCount
}

func (u userlogin) clone(db *gorm.DB) userlogin {
	u.userloginDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userlogin) replaceDB(db *gorm.DB) userlogin {
	u.userloginDo.ReplaceDB(db)
	return u
}

type userloginDo struct{ gen.DO }

type IUserloginDo interface {
	gen.SubQuery
	Debug() IUserloginDo
	WithContext(ctx context.Context) IUserloginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserloginDo
	WriteDB() IUserloginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserloginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserloginDo
	Not(conds ...gen.Condition) IUserloginDo
	Or(conds ...gen.Condition) IUserloginDo
	Select(conds ...field.Expr) IUserloginDo
	Where(conds ...gen.Condition) IUserloginDo
	Order(conds ...field.Expr) IUserloginDo
	Distinct(cols ...field.Expr) IUserloginDo
	Omit(cols ...field.Expr) IUserloginDo
	Join(table schema.Tabler, on ...field.Expr) IUserloginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserloginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserloginDo
	Group(cols ...field.Expr) IUserloginDo
	Having(conds ...gen.Condition) IUserloginDo
	Limit(limit int) IUserloginDo
	Offset(offset int) IUserloginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserloginDo
	Unscoped() IUserloginDo
	Create(values ...*model.Userlogin) error
	CreateInBatches(values []*model.Userlogin, batchSize int) error
	Save(values ...*model.Userlogin) error
	First() (*model.Userlogin, error)
	Take() (*model.Userlogin, error)
	Last() (*model.Userlogin, error)
	Find() ([]*model.Userlogin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Userlogin, err error)
	FindInBatches(result *[]*model.Userlogin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Userlogin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserloginDo
	Assign(attrs ...field.AssignExpr) IUserloginDo
	Joins(fields ...field.RelationField) IUserloginDo
	Preload(fields ...field.RelationField) IUserloginDo
	FirstOrInit() (*model.Userlogin, error)
	FirstOrCreate() (*model.Userlogin, error)
	FindByPage(offset int, limit int) (result []*model.Userlogin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserloginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userloginDo) Debug() IUserloginDo {
	return u.withDO(u.DO.Debug())
}

func (u userloginDo) WithContext(ctx context.Context) IUserloginDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userloginDo) ReadDB() IUserloginDo {
	return u.Clauses(dbresolver.Read)
}

func (u userloginDo) WriteDB() IUserloginDo {
	return u.Clauses(dbresolver.Write)
}

func (u userloginDo) Session(config *gorm.Session) IUserloginDo {
	return u.withDO(u.DO.Session(config))
}

func (u userloginDo) Clauses(conds ...clause.Expression) IUserloginDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userloginDo) Returning(value interface{}, columns ...string) IUserloginDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userloginDo) Not(conds ...gen.Condition) IUserloginDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userloginDo) Or(conds ...gen.Condition) IUserloginDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userloginDo) Select(conds ...field.Expr) IUserloginDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userloginDo) Where(conds ...gen.Condition) IUserloginDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userloginDo) Order(conds ...field.Expr) IUserloginDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userloginDo) Distinct(cols ...field.Expr) IUserloginDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userloginDo) Omit(cols ...field.Expr) IUserloginDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userloginDo) Join(table schema.Tabler, on ...field.Expr) IUserloginDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userloginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserloginDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userloginDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserloginDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userloginDo) Group(cols ...field.Expr) IUserloginDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userloginDo) Having(conds ...gen.Condition) IUserloginDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userloginDo) Limit(limit int) IUserloginDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userloginDo) Offset(offset int) IUserloginDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userloginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserloginDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userloginDo) Unscoped() IUserloginDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userloginDo) Create(values ...*model.Userlogin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userloginDo) CreateInBatches(values []*model.Userlogin, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userloginDo) Save(values ...*model.Userlogin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userloginDo) First() (*model.Userlogin, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userlogin), nil
	}
}

func (u userloginDo) Take() (*model.Userlogin, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userlogin), nil
	}
}

func (u userloginDo) Last() (*model.Userlogin, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userlogin), nil
	}
}

func (u userloginDo) Find() ([]*model.Userlogin, error) {
	result, err := u.DO.Find()
	return result.([]*model.Userlogin), err
}

func (u userloginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Userlogin, err error) {
	buf := make([]*model.Userlogin, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userloginDo) FindInBatches(result *[]*model.Userlogin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userloginDo) Attrs(attrs ...field.AssignExpr) IUserloginDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userloginDo) Assign(attrs ...field.AssignExpr) IUserloginDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userloginDo) Joins(fields ...field.RelationField) IUserloginDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userloginDo) Preload(fields ...field.RelationField) IUserloginDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userloginDo) FirstOrInit() (*model.Userlogin, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userlogin), nil
	}
}

func (u userloginDo) FirstOrCreate() (*model.Userlogin, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userlogin), nil
	}
}

func (u userloginDo) FindByPage(offset int, limit int) (result []*model.Userlogin, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userloginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userloginDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userloginDo) Delete(models ...*model.Userlogin) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userloginDo) withDO(do gen.Dao) *userloginDo {
	u.DO = *do.(*gen.DO)
	return u
}
