// Code generated by Kitex v0.6.1. DO NOT EDIT.

package apiservice

import (
	"context"
	user "douyinv2/user/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	RegisterUser(ctx context.Context, req *user.UserRegisterRequest, callOptions ...callopt.Option) (r *user.UserRegisterResponse, err error)
	LoginUser(ctx context.Context, req *user.UserLoginRequest, callOptions ...callopt.Option) (r *user.UserLoginResponse, err error)
	UserInfo(ctx context.Context, req *user.UserInfoRequest, callOptions ...callopt.Option) (r *user.UserInfoResponse, err error)
	CountAdd(ctx context.Context, req *user.UserCountChangeRequest, callOptions ...callopt.Option) (r *user.UserCountChangeResponse, err error)
	RelationAction(ctx context.Context, req *user.RelationActionRequest, callOptions ...callopt.Option) (r *user.RelationActionResponse, err error)
	FollowList(ctx context.Context, req *user.FollowListRequest, callOptions ...callopt.Option) (r *user.FollowListResponse, err error)
	FollowerList(ctx context.Context, req *user.FollowerListRequest, callOptions ...callopt.Option) (r *user.FollowerListResponse, err error)
	FriendList(ctx context.Context, req *user.FriendListRequest, callOptions ...callopt.Option) (r *user.FriendListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kApiServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kApiServiceClient struct {
	*kClient
}

func (p *kApiServiceClient) RegisterUser(ctx context.Context, req *user.UserRegisterRequest, callOptions ...callopt.Option) (r *user.UserRegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegisterUser(ctx, req)
}

func (p *kApiServiceClient) LoginUser(ctx context.Context, req *user.UserLoginRequest, callOptions ...callopt.Option) (r *user.UserLoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginUser(ctx, req)
}

func (p *kApiServiceClient) UserInfo(ctx context.Context, req *user.UserInfoRequest, callOptions ...callopt.Option) (r *user.UserInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserInfo(ctx, req)
}

func (p *kApiServiceClient) CountAdd(ctx context.Context, req *user.UserCountChangeRequest, callOptions ...callopt.Option) (r *user.UserCountChangeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CountAdd(ctx, req)
}

func (p *kApiServiceClient) RelationAction(ctx context.Context, req *user.RelationActionRequest, callOptions ...callopt.Option) (r *user.RelationActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RelationAction(ctx, req)
}

func (p *kApiServiceClient) FollowList(ctx context.Context, req *user.FollowListRequest, callOptions ...callopt.Option) (r *user.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, req)
}

func (p *kApiServiceClient) FollowerList(ctx context.Context, req *user.FollowerListRequest, callOptions ...callopt.Option) (r *user.FollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerList(ctx, req)
}

func (p *kApiServiceClient) FriendList(ctx context.Context, req *user.FriendListRequest, callOptions ...callopt.Option) (r *user.FriendListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FriendList(ctx, req)
}
