// Code generated by hertz generator.

package douyinv2

import (
	"context"
	douyin "douyinv2/biz/model/douyinv2"
	"douyinv2/biz/mw"
	"douyinv2/biz/rpc"
	"douyinv2/user/errons"
	"douyinv2/user/kitex_gen/user"
	_const "douyinv2/video/const"
	"douyinv2/video/kitex_gen/video"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/form3tech-oss/jwt-go"
	"github.com/h2non/filetype"
	"io"
	"log"
	"strconv"
	"time"
)

// RegisterUser .
// @router /douyin/user/register [POST]
func RegisterUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.UserRegisterRequest
	var _ *user.UserRegisterResponse
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = rpc.UserRegister(ctx, &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	mw.Jwtmiddleware.LoginHandler(ctx, c)
}

// LoginUser .
// @router /douyin/user/login [POST]
func LoginUser(ctx context.Context, c *app.RequestContext) {
	//var err error
	//var req douyin.UserLoginRequest
	//err = c.BindAndValidate(&req)
	//if err != nil {
	//	c.String(consts.StatusBadRequest, err.Error())
	//	return
	//}
	//resp, err := rpc.UserLogin(ctx, &user.UserLoginRequest{Username: req.Username, Password: req.Password})
	//c.JSON(consts.StatusOK, resp)
	mw.Jwtmiddleware.LoginHandler(ctx, c)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.UserInfoRequest
	resp := &user.UserInfoResponse{}
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, _ = rpc.UserInfo(ctx, &user.UserInfoRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	c.JSON(consts.StatusOK, resp)
}

// VideoPublish .
// @router /douyin/publish/action/ [POST]

func VideoPublish(ctx context.Context, c *app.RequestContext) {
	//var err error
	var req douyin.VideoPublishRequestv2
	//获取表格数据
	file, _ := c.FormFile("data")
	title := string(c.FormValue("title"))
	token := string(c.FormValue("token"))
	req.Title = title
	resolvetoken, err := jwt.ParseWithClaims(token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err != nil {
		fmt.Println(err)
		return
	}
	myclaims := resolvetoken.Claims.(*mw.Myclaims)
	req.ID = myclaims.Id
	fh, err := file.Open()
	if err != nil {
		panic(err.Error())
	}
	Data, _ := io.ReadAll(fh)
	ext, _ := filetype.Match(Data)
	filepath := strconv.FormatInt(time.Now().Unix(), 10) + strconv.FormatInt(req.ID, 10) + "." + ext.Extension
	err = c.SaveUploadedFile(file, fmt.Sprintf("./movies/%s", filepath))
	if err != nil {
		panic(err.Error())
	}
	//defer fh.Close()
	req.Filepath = "http://" + _const.DestIP + "/movies/" + filepath
	snappath := "./photo/" + strconv.FormatInt(time.Now().Unix(), 10) + strconv.FormatInt(req.ID, 10)
	coverurl, _ := GetSnapshot("./movies/"+filepath, snappath, 1)
	req.Coverurl = "http://192.168.217.167:8888" + coverurl
	fmt.Println(req.Coverurl)
	resp, _ := rpc.VideoPublish(ctx, &req)
	if resp.StatusCode == 0 {
		_, _ = rpc.CountChange(ctx, &user.UserCountChangeRequest{UserId: req.ID, Ifadd: true, Filed: "Work", Token: token})
	}
	c.JSON(consts.StatusOK, resp)
}

// GetVideoList .
// @router /douyin/favorite/action/ [POST]
func GetVideoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.VideoPublishedListRequest
	var resp *douyin.VideoPublishedListResponse
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resolvetoken, err := jwt.ParseWithClaims(req.Token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err == nil {
		myclaims := resolvetoken.Claims.(*mw.Myclaims)
		resp, _ = rpc.VideoList(ctx, &req, myclaims.Id)
	}
	if err != nil {
		resp, _ = rpc.VideoList(ctx, &req, -1)
	}
	c.JSON(consts.StatusOK, resp)
}

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.FeedRequest
	var resp *douyin.FeedResponse
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		log.Fatal(err)
	}
	resolvetoken, err := jwt.ParseWithClaims(req.Token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err == nil {
		myclaims := resolvetoken.Claims.(*mw.Myclaims)
		resp, _ = rpc.FeedVideoInfo(ctx, &req, myclaims.Id)
	}
	if err != nil {
		resp, _ = rpc.FeedVideoInfo(ctx, &req, -1)
	}
	c.JSON(consts.StatusOK, resp)
}

// LikeAction .
// @router /douyin/favorite/action/ [POST]
func LikeAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	token := req.Token
	resolvetoken, err := jwt.ParseWithClaims(token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err != nil {
		fmt.Println(err)
		return
	}
	myclaims := resolvetoken.Claims.(*mw.Myclaims)
	req2 := &video.FavoriteActionRequest{}
	req2.ID = myclaims.Id
	req2.Video_ID = req.VideoID
	req2.ActionType = req.ActionType
	resp := rpc.LikeAction(ctx, req2)
	c.JSON(consts.StatusOK, resp)
}

// LikeVideos .
// @router /douyin/favorite/list/ [GET]
func LikeVideos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.FavoriteVideoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := rpc.LikeVideosList(ctx, &video.FavoriteVideoListRequest{UserId: req.UserID, Token: req.Token})
	c.JSON(consts.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(douyin.CommentActionResponse)
	var req douyin.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resolvetoken, err := jwt.ParseWithClaims(req.Token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err != nil {
		temp := errons.ConverterrtoErr(err)
		resp.StatusMsg = temp.Errmessage
		resp.StatusCode = temp.Errcode
	}
	myclaims := resolvetoken.Claims.(*mw.Myclaims)
	ID := myclaims.Id
	req2 := &video.CommentActionRequest{CommentId: req.CommentID, Userid: ID, VideoId: req.VideoID, CommentText: req.CommentText, ActionType: req.ActionType}
	resp2 := rpc.CommentAction(ctx, req2)
	c.JSON(consts.StatusOK, resp2)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := rpc.CommentList(ctx, &video.CommentListRequest{VideoId: req.VideoID})
	c.JSON(consts.StatusOK, resp)
}

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.RelationActionRequest
	var resp *user.RelationActionResponse
	resp = &user.RelationActionResponse{}
	err = c.BindAndValidate(&req)
	resolvetoken, err := jwt.ParseWithClaims(req.Token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err != nil {
		temp := errons.ConverterrtoErr(err)
		resp.StatusMsg = temp.Errmessage
		resp.StatusCode = temp.Errcode
	}
	myclaims := resolvetoken.Claims.(*mw.Myclaims)
	ID := myclaims.Id
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, _ = rpc.RelationAction(ctx, &user.RelationActionRequest{Fromid: ID, Toid: req.ToUserID, ActionType: req.ActionType})
	c.JSON(consts.StatusOK, resp)
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.FollowListRequest
	var resp *user.FollowListResponse
	resp = &user.FollowListResponse{}
	err = c.BindAndValidate(&req)
	resolvetoken, err := jwt.ParseWithClaims(req.Token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err != nil {
		temp := errons.ConverterrtoErr(err)
		resp.StatusMsg = temp.Errmessage
		resp.StatusCode = temp.Errcode
	}
	myclaims := resolvetoken.Claims.(*mw.Myclaims)
	ID := myclaims.Id
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, _ = rpc.FollowList(ctx, &user.FollowListRequest{Userid: ID})
	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.FollowerListRequest
	var resp *user.FollowerListResponse
	resp = &user.FollowerListResponse{}
	err = c.BindAndValidate(&req)
	resolvetoken, err := jwt.ParseWithClaims(req.Token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err != nil {
		temp := errons.ConverterrtoErr(err)
		resp.StatusMsg = temp.Errmessage
		resp.StatusCode = temp.Errcode
	}
	myclaims := resolvetoken.Claims.(*mw.Myclaims)
	ID := myclaims.Id
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, _ = rpc.FollowerList(ctx, &user.FollowerListRequest{Userid: ID})
	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin.FriendListRequest
	var resp *user.FriendListResponse
	resp = &user.FriendListResponse{}
	err = c.BindAndValidate(&req)
	resolvetoken, err := jwt.ParseWithClaims(req.Token, &mw.Myclaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte("douyintest"), nil
	})
	if err != nil {
		temp := errons.ConverterrtoErr(err)
		resp.StatusMsg = temp.Errmessage
		resp.StatusCode = temp.Errcode
	}
	myclaims := resolvetoken.Claims.(*mw.Myclaims)
	ID := myclaims.Id
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, _ = rpc.FriendList(ctx, &user.FriendListRequest{ID: ID})
	c.JSON(consts.StatusOK, resp)
}
